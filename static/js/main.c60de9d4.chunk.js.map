{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","aboutText","class","name","autocomplete","onClick","toggleMode","for","placeholder","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","style","background","color","newText","showAlert","navigator","clipboard","writeText","split","length","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c60de9d4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <input\r\n            type=\"radio\"\r\n            class=\"btn-check\"\r\n            name=\"options\"\r\n            id=\"option1\"\r\n            autocomplete=\"off\"\r\n            onClick={props.toggleMode}\r\n          />\r\n          <label class=\"btn btn-secondary me-2\" for=\"option1\">\r\n            Light Theme\r\n          </label>\r\n\r\n          <input\r\n            type=\"radio\"\r\n            class=\"btn-check\"\r\n            name=\"options\"\r\n            id=\"option4\"\r\n            autocomplete=\"off\"\r\n            onClick={props.toggleMode}\r\n          />\r\n          <label class=\"btn btn-secondary me-2\" for=\"option4\">\r\n            Dark Mode\r\n          </label>\r\n          {/* <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className={`form-check-label text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              } mx-2`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Dark Mode\r\n            </label>\r\n          </div> */}\r\n          <form className=\"d-flex\">\r\n            <input\r\n              className=\"htmlForm-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired, //isRequired makes it mandatory.\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About text here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text is converted into Uppercase!\", \"success\");\r\n  };\r\n  const handleLoClick = () => {\r\n    // console.log(\"Lowercase was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text is converted into Lowercase!\", \"success\");\r\n  };\r\n  const handleClrClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text is cleared!\", \"success\");\r\n  };\r\n  const handleCopyClick = () => {\r\n    navigator.clipboard.writeText(text);\r\n    // alert(\"Text copied to clipboard!\");\r\n    // let newText = text.toLowerCase();\r\n    // setText(newText);\r\n    props.showAlert(\"Text is copied to clipboard!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"Enter text here.\");\r\n  //   text = \"new text\"; //Wrong way to change the state.\r\n  //   setText = \"new text\"; //Correct way to change the state.\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3 my-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"mybox\"\r\n            rows=\"8\"\r\n            style={{\r\n              background: props.mode === \"light\" ? \"white\" : \"grey\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n          Convert to UPPERCASE\r\n        </button>\r\n        <button className=\"btn btn-secondary mx-2\" onClick={handleLoClick}>\r\n          Convert to lowerCase\r\n        </button>\r\n        <button className=\"btn btn-success my-2\" onClick={handleCopyClick}>\r\n          Copy to clipboard\r\n        </button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleClrClick}>\r\n          Clear\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-2\">\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words, {text.length} characters{\" \"}\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read.</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in the textbox to preview it\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  let toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.background = \"black\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark mode is enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.background = \"white\";\n      document.body.style.color = \"black\";\n      showAlert(\"Light mode is enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      <Navbar\n        title=\"TextUtils\"\n        aboutText=\"About TextUtils\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      {/* <Navbar /> */}\n\n      <Alert alert={alert} />\n\n      <div className=\"container my-2\">\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter the text to analyse.\"\n          mode={mode}\n        />\n        {/* <About /> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}